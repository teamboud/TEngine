#version 400 core

in vec3 position;
in vec3 textureCoords;
in vec3 normal;

out vec3 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[25];
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[25];

uniform float useFakeLightning;

uniform float numberOfRows;
uniform vec2 offset;

const float density = 0.002;
const float gradient = 2;

uniform vec4 plane;

void main(void){

	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	gl_ClipDistance[0] = dot(worldPosition, plane);
	mat4 modelViewMatrix = viewMatrix * transformationMatrix;
	vec4 positionRelativeToCam = modelViewMatrix * vec4(position,1.0);
	gl_Position = projectionMatrix * positionRelativeToCam;
	
	pass_textureCoords.x = (textureCoords.x/numberOfRows) + offset.x;
	pass_textureCoords.y = (textureCoords.y/numberOfRows) + offset.y;
	pass_textureCoords.z = textureCoords.z;
	vec3 actualNormal = normal;
	if(useFakeLightning > 0.5){
	actualNormal = vec3(0.0,1.0,0.0);
	}
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
	for(int i=0; i<25; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density),gradient));
	visibility = clamp(visibility,0.0,1.0);
	
	
}