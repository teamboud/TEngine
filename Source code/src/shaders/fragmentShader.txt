#version 400 core

in vec3 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[25];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler[16];

uniform vec3 lightColor[25];
uniform vec3 attenuation[25];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform vec3 tintColor;

const float levels = 3.0;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i=0; i<25; i++){
	float distance = length(toLightVector[i]);
	float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
	vec3 unitLightVector = normalize(toLightVector[i]);		
	float nDot1 = dot(unitNormal,unitLightVector);
	float brightness = max(nDot1,0.0);
	//float level = floor(brightness * levels); // FOR CEL SHADING
	//brightness = level / levels;
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	//level = floor(dampedFactor * levels); // FOR CEL SHADING
	//dampedFactor = level / levels;
	totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;
	totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i])/attFactor;
	}
	totalDiffuse = max(totalDiffuse,0.25);
	

	vec4 textureColor = texture(textureSampler[int(pass_textureCoords.z)], pass_textureCoords.xy);
	if(textureColor.a<0.5){
	discard;
	}
	out_Color =  vec4(totalDiffuse,1.0) * textureColor + vec4(totalSpecular,1.0);
    out_Color = mix(vec4(skyColor,1.0),out_Color,visibility);
    
    if(!(tintColor.r == 0 && tintColor.g == 0 && tintColor.b == 0)){
    out_Color = mix(vec4(tintColor, 1.0),out_Color, 0.7);
    }
    
}